#!/usr/bin/env bash

source ./bin/init-env

if [ $# -eq 0 ]
  then
    echo "Setting up dev db"
    echo "You can start either production or development"
    echo "e.g bin/db-setup dev"
    echo "e.g bin/db-setup prod"
fi

PF_TARGET="${1:-dev}"

POSSIBLE_VALUES=("prod" "dev" "test")

if [[ ! " ${POSSIBLE_VALUES[@]} " =~ " ${PF_TARGET} " ]]; then
  echo "target should be either: dev,test or prod"
  exit 1
fi

./bin/services-start "$@" && \
  ./bin/server-start "${PF_TARGET}"

case "${PF_TARGET}" in
  'prod')
    SERVICE_ENV='prod'
    FULL_SERVICE_ENV='production'
  ;;
  'dev')
    SERVICE_ENV='dev'
    FULL_SERVICE_ENV='development'
  ;;
  'test')
    SERVICE_ENV='test'
    FULL_SERVICE_ENV='test'
  ;;
esac

docker container ls | grep ${SERVICE_NAME}-${SERVICE_ENV}-app 1> /dev/null
if [[ $? = 1 ]]; then
  echo "Starting [${PF_TARGET}]..."
  docker run --rm \
    --env RAILS_LOG_TO_STDOUT=true \
    --env LOG_LEVEL=debug \
    --network ${SERVICE_NAME}-bridge-docker-network \
    --env REDIS_URL=redis://${SERVICE_NAME}-redis:6379/1 \
    --env DATABASE_URL=mysql2://${DB_USER}:${DB_PASSWORD}@${SERVICE_NAME}-db:3306/${SERVICE_NAME}_${FULL_SERVICE_ENV} \
    --mount type=bind,source=$PWD,target=${ARG_APP_PATH} \
    ${SERVICE_NAME}/${SERVICE_ENV}:latest bash -c 'bin/rails db:create db:migrate db:seed'
else
  echo "Connecting to [${PF_TARGET}]...."
  docker exec ${SERVICE_NAME}-${SERVICE_ENV}-app bash -c 'bin/rails db:create db:migrate db:seed'
fi