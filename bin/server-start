#!/usr/bin/env bash

source ./bin/init-env

if [ $# -eq 0 ]
  then
    echo "Starting dev server"
    echo "You can start either production or development"
    echo "e.g bin/server-start dev"
    echo "e.g bin/server-start prod"
fi

PF_TARGET="${1:-dev}"

POSSIBLE_VALUES=("prod" "dev")

if [[ ! " ${POSSIBLE_VALUES[@]} " =~ " ${PF_TARGET} " ]]; then
  echo "target should be either: prod or dev"
  exit 1
fi

./bin/services-start "$@"

docker container ls | grep ${SERVICE_NAME}-${SERVICE_ENV}-app 1> /dev/null
if [[ $? = 1 ]]; then
  echo "Starting [${PF_TARGET}] Server..."
else
  echo "Server [${PF_TARGET}] Started!"
fi

case "${PF_TARGET}" in
  'prod')
    FULL_SERVICE_ENV='production'
    SERVICE_ENV='prod'
    SERVER_PUBLISHED_PORT=${PROD_SERVER_PUBLISHED_PORT}
  ;;
  'dev')
    FULL_SERVICE_ENV='development'
    SERVICE_ENV='dev'
    SERVER_PUBLISHED_PORT=${DEV_SERVER_PUBLISHED_PORT}

    docker run --rm --detach \
    --name ${SERVICE_NAME}-${SERVICE_ENV}-app \
    --env RAILS_LOG_TO_STDOUT=true \
    --env LOG_LEVEL=debug \
    --network ${SERVICE_NAME}-bridge-docker-network \
    --publish ${SERVER_PUBLISHED_PORT}:3000 \
    --env REDIS_URL=redis://${SERVICE_NAME}-redis:6379/1 \
    --env DATABASE_URL=mysql2://${DB_USER}:${DB_PASSWORD}@${SERVICE_NAME}-db:3306/${SERVICE_NAME}_${FULL_SERVICE_ENV} \
    --mount type=bind,source=$PWD,target=${APP_ROOT} \
    ${SERVICE_NAME}/${SERVICE_ENV}:latest bash -c 'bin/rails server -p 3000 --early-hints -b 0.0.0.0'
  ;;
esac