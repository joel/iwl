#!/usr/bin/env bash

source ./bin/init-env

./bin/docker-check
if [[ $? = 1 ]]; then
  exit 1
fi

if [[ -f ./tmp/pids/server.pid ]]; then
  echo "A Server is already running!"
  echo "Stop server or remove tmp/pids/server.pid"
  exit 1
fi

if [ $# -eq 0 ]
  then
    echo "Starting dev server"
    echo "You can start either production or development"
    echo "e.g bin/server-start dev"
    echo "e.g bin/server-start prod"
fi

PF_TARGET="${1:-dev}"

POSSIBLE_VALUES=("prod" "dev")

if [[ ! " ${POSSIBLE_VALUES[@]} " =~ " ${PF_TARGET} " ]]; then
  echo "target should be either: prod or dev"
  exit 1
fi

docker container ls | grep ${SERVICE_NAME}-${PF_TARGET}-app 1> /dev/null
if [[ $? = 0 ]]; then
  echo "Server [${PF_TARGET}] Started!"
  exit 0
fi

./bin/services-start

# docker exec ${SERVICE_NAME}-${PF_TARGET}-app bash -c "bin/rails tmp:clear" && \
# docker exec ${SERVICE_NAME}-${PF_TARGET}-app bash -c "bin/rails log:clear" && \

echo "Clean tmp dir" && \
rm -rf tmp/* && \
echo "Clean log dir" && \
rm -rf log/* && \
echo "Redis Flush Cache" && \
docker exec ${SERVICE_NAME}-redis bash -c "redis-cli -h 127.0.0.1 -p 6379 FLUSHALL" && \

case "${PF_TARGET}" in
  'prod')
    FULL_SERVICE_ENV='production'
    SERVICE_ENV='prod'
    SERVER_PUBLISHED_PORT=${PROD_SERVER_PUBLISHED_PORT}

    docker run --rm --detach \
      --name ${SERVICE_NAME}-${SERVICE_ENV}-app \
      --env RAILS_LOG_TO_STDOUT=${RAILS_LOG_TO_STDOUT} \
      --env LOG_LEVEL=${LOG_LEVEL} \
      --env LOG_APPENDER=${LOG_APPENDER} \
      --network ${SERVICE_NAME}-bridge-docker-network \
      --publish ${SERVER_PUBLISHED_PORT}:3000 \
      --env REDIS_URL=redis://${SERVICE_NAME}-redis:6379/1 \
      --env DATABASE_URL=mysql2://${DB_USER}:${DB_PASSWORD}@${SERVICE_NAME}-db:3306/${SERVICE_NAME}_${FULL_SERVICE_ENV} \
      ${SERVICE_NAME}/${SERVICE_ENV}:latest bash -c 'bin/rails server -p 3000 --early-hints -b 0.0.0.0'
  ;;
  'dev')
    FULL_SERVICE_ENV='development'
    SERVICE_ENV='dev'
    SERVER_PUBLISHED_PORT=${DEV_SERVER_PUBLISHED_PORT}

    docker run --rm --detach \
      --name ${SERVICE_NAME}-${SERVICE_ENV}-app \
      --env RAILS_LOG_TO_STDOUT=${RAILS_LOG_TO_STDOUT} \
      --env LOG_LEVEL=${LOG_LEVEL} \
      --env LOG_APPENDER=${LOG_APPENDER} \
      --network ${SERVICE_NAME}-bridge-docker-network \
      --publish ${SERVER_PUBLISHED_PORT}:3000 \
      --env REDIS_URL=redis://${SERVICE_NAME}-redis:6379/1 \
      --env DB_POOL=${DB_POOL} \
      --env DB_USER=${DB_USER} \
      --env DB_PASSWORD=${DB_PASSWORD} \
      --env DB_HOST=${SERVICE_NAME}-db \
      --env DB_PORT=3306 \
      --mount type=bind,source=$PWD,target=${ARG_APP_PATH} \
      ${SERVICE_NAME}/${SERVICE_ENV}:latest bash -c 'bin/rails server -p 3000 --early-hints -b 0.0.0.0'
  ;;
esac

sleep 1

docker container ls | grep ${SERVICE_NAME}-${PF_TARGET}-app 1> /dev/null
if [[ $? = 1 ]]; then
  echo "Please rebuild image [${PF_TARGET}]!" && \
  echo "bin/docker-build ${PF_TARGET}"
else
  # echo "Clean tmp dir" && \
  # docker exec ${SERVICE_NAME}-${PF_TARGET}-app bash -c "bin/rails tmp:clear" && \
  # echo "Clean log dir" && \
  # docker exec ${SERVICE_NAME}-${PF_TARGET}-app bash -c "bin/rails log:clear" && \
  # echo "Redis Flush Cache" && \
  # docker exec ${SERVICE_NAME}-redis bash -c "redis-cli -h 127.0.0.1 -p 6379 FLUSHALL" && \
  echo "Server running: http://localhost:${SERVER_PUBLISHED_PORT}"
fi

docker container ls | grep ${SERVICE_NAME}-${PF_TARGET}-sidekiq 1> /dev/null
if [[ $? = 1 ]]; then
  ./bin/sidekiq-start ${PF_TARGET}
fi